var roomId;
var atDestination = false;
var lastScannedBeaconsClearTime = getCurrentTimeMillis();
var scannedBeacons = [];
var angleRads;
var angleToNorthRads = 0.26;

function passAngleRadsFromAndroid(angle) {
    angleRads = angle;
}

function getCurrentTimeMillis() {
    return new Date().getTime();
}

function Beacon(mac, rssi) {
    this.mac = mac;
    this.rssi = rssi;
}

function clearScannedBeaconsArray(){
    if (getCurrentTimeMillis() - lastScannedBeaconsClearTime >  4000) {
        scannedBeacons = [];
        lastScannedBeaconsClearTime = getCurrentTimeMillis();
    }
}

function passMacRssiFromAndroid(mac, rssi) {
    clearScannedBeaconsArray();
    for(var beacon in scannedBeacons) if (beacon.mac == mac) {
        beacon.rssi = rssi;
        return;
    }
    scannedBeacons.push(new Beacon(mac, rssi));
    navigationUpdate();
}

function getRoomIdFromURLParams() {
    if (roomId === undefined) {
        var uri = new Uri(window.location.href);
        roomId = uri.getQueryParamValue("roomId");
    }
    return roomId;
}

function navigationUpdate() {
    if (atDestination) return;
    var destinationRoomId = getRoomIdFromURLParams();

    $.ajax({
        url: getContextPath() + "/room/find",
        type: "post",
        dataType: 'json',
        data: JSON.stringify(scannedBeacons),
        contentType: "application/json",
        success: function(data) {
            var room = data['value'];
            if (room == null) {
                showUnknownPositionMessage();
                return;
            }

            atDestination = room.roomId == destinationRoomId;
            if (!atDestination) giveNavigationGuidelines(room);
            else showReachedDestinationMessage();
        },
        error: function (e) {
            console.log(e);
            showErrorMessage();
        }
    });
}

function showErrorMessage() {
    $("#navigation").html('<div class="alert alert-danger">' +
        '<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>' +
        '<span class="sr-only">Error:</span> Failed to communicate with server.' +
        '</div>');
}

function showReachedDestinationMessage() {
    $("#navigation").html('<div><h2>Oled kohal!</h2></div>');
}

function giveNavigationGuidelines(room) {
    var pathPointId = room.corridorPathPointId;
    $.ajax({
        url: getContextPath() + "/guideline?fromPathPointId=" + pathPointId + "&toRoomId=" + getRoomIdFromURLParams(),
        type: "get",
        dataType: 'json',
        contentType: "application/json",
        success: function(data) {
            var pathpoints = data['value'];
            if (pathpoints == null) {
                showUnknownGuidelineMessage();
                return
            }

            guideUser(pathpoints);
        },
        error: function (e) {
            console.log(e);
            showErrorMessage();
        }
    });

    $("#navigation").html('<div id="animated-example" class="animated bounce">' +
        '<h2>Lähim ruum on ' + room.roomName + '.</h2> ' + '</div>');
}

function showUnknownPositionMessage() {
    $("#navigation").html('<div id="animated-example" class="animated bounce">' +
        '<h2>Pole majakaid, et tuvastada lähimat ruumi.</h2> ' + '</div>');
}

function showUnknownGuidelineMessage() {
    $("#guideline").html('<div class="alert alert-danger">' +
        '<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>' +
        '<span class="sr-only">Error:</span> Server returned invalid guidelines.' +
        '</div>');
}

function showGuidelineMessage(guideline) {
    $("#guideline").html("<p>" + guideline + "</p>");
}

function guideUser(pathpoints) {
    for (var index in pathpoints) {
        var pathpoint = pathpoints[index];
        console.log(pathpoint.x + " " + pathpoint.y + " " + pathpoint.pathPointId + " " + pathpoint.name);
    }
    showGuidelineMessage(calcAngle(pathpoints[0], pathpoints[1]));
}

function calcAngle(p1, p2) {
    return Math.atan2(p2.y - p1.y, p2.x - p1.x) + angleToNorthRads;
}