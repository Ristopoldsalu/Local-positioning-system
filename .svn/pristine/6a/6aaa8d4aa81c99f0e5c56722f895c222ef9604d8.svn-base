package ee.lps.service;

import ee.lps.dto.RoomDto;
import ee.lps.model.Beacon;
import ee.lps.model.Room;
import ee.lps.model.RoomType;
import ee.lps.repository.BeaconRepository;
import ee.lps.repository.RoomRepository;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

import static java.util.Arrays.asList;
import static org.junit.Assert.*;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

public class RoomServiceTest {
    public static final long TEST_BUILDING_ID = 4L;
    public static final String TEST_BEACON_MACADDR = "18:16:30:FF:FF:FF";
    public static final long TEST_ROOM_ID = 10L;

    @InjectMocks
    private RoomServiceImpl roomService;

    @Mock
    private RoomRepository roomRepositoryMock;

    @Mock
    private BeaconRepository beaconRepository;

    @Before
    public void setupMocks() {
        MockitoAnnotations.initMocks(this);

        Room room = createBlankRoom();
        room.setRoomName("Test room");
        room.setRoomId(TEST_ROOM_ID);
        when(roomRepositoryMock.findOne(TEST_ROOM_ID)).thenReturn(room);

        Beacon beacon = new Beacon();
        beacon.setBeaconMacAddress(TEST_BEACON_MACADDR);
        beacon.setBeaconId(TEST_ROOM_ID);
        when(beaconRepository.findByMac(TEST_BEACON_MACADDR)).thenReturn(beacon);
        beacon.setRoom(room);

        when(roomRepositoryMock.getRoomsByBuildingId(any())).thenReturn(Collections.emptyList());

        when(roomRepositoryMock.getRoomsByBuildingId(TEST_BUILDING_ID)).thenReturn(
                asList(createBlankRoom(), createBlankRoom())
        );
    }

    private Room createBlankRoom() {
        Room room = new Room();
        room.setRoomType(new RoomType());
        return room;
    }

    @Test
    public void shouldFindRoomWhenIdExists() {
        RoomDto room = roomService.findRoomById(TEST_ROOM_ID);
        assertEquals("Test room", room.getRoomName());
    }

    @Test
    public void shouldNotFindRoomIfIdDoesntExist() {
        assertNull(roomService.findRoomById(null));
        assertNull(roomService.findRoomById(100L));
        assertNull(roomService.findRoomById(-20L));
    }

    @Test
    public void shouldNotFindRoomsIfBuildingIdNotExists() {
        assertEquals(0, roomService.getRoomsByBuildingId(null).size());
        assertEquals(0, roomService.getRoomsByBuildingId(100L).size());
        assertEquals(0, roomService.getRoomsByBuildingId(-10L).size());
    }

    @Test
    public void shouldFindRoomsWhenBuildingExists() {
        assertEquals(2, roomService.getRoomsByBuildingId(TEST_BUILDING_ID).size());
    }

    @Test
    public void shouldBeCorrectDestinationIfMacIsInRoom() {
        assertTrue(roomService.checkIfCorrectDestination(TEST_BEACON_MACADDR, (short) -60, TEST_ROOM_ID));
    }

    @Test
    public void shouldBeIncorrectDestinationIfMacIsNotInRoom() {
        assertFalse(roomService.checkIfCorrectDestination(TEST_BEACON_MACADDR, (short) -50, 0L));
        assertFalse(roomService.checkIfCorrectDestination("Big mac", (short) -40, TEST_ROOM_ID));
        assertFalse(roomService.checkIfCorrectDestination(null, null, null));
    }
}