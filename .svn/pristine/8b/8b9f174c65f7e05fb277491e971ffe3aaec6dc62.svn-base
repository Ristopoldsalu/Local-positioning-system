package ee.lps.controller;

import ee.lps.dto.RoomDTO;
import ee.lps.service.RoomService;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import static ee.lps.util.Wrapper.*;
import static junit.framework.Assert.assertEquals;
import static junit.framework.TestCase.assertFalse;
import static junit.framework.TestCase.assertNull;
import static junit.framework.TestCase.assertTrue;
import static org.mockito.Mockito.when;

public class NavigationControllerTest {
    public static final String TEST_ROOM_NUMBER = "100A";
    public static final String TEST_ROOM_NAME = "Boss room";
    public static final long TEST_ROOM_ID = 4L;

    @InjectMocks
    private NavigationController navController;

    @Mock
    private RoomService roomServiceMock;

    @Before
    public void setupForTesting() {
        MockitoAnnotations.initMocks(this);
        when(roomServiceMock.findRoomById(TEST_ROOM_ID))
                .thenReturn(new RoomDTO(TEST_ROOM_ID, TEST_ROOM_NUMBER, TEST_ROOM_NAME, null, null));
    }

    @Test
    public void shouldNotPutRoomToModelIfRoomIdIsNull() {
        ModelAndView view = navController.navigate(null);
        assertNull(view.getModel().get("room"));
    }

    @Test
    public void shouldNotPutRoomToModelIfRoomIdNotExists() {
        ModelAndView view = navController.navigate(-1L);
        assertNull(view.getModel().get("room"));

        view = navController.navigate(40L);
        assertNull(view.getModel().get("room"));
    }

    @Test
    public void shouldPutRoomToModelIfRoomExists() {
        ModelAndView view = navController.navigate(TEST_ROOM_ID);
        RoomDTO room = (RoomDTO) view.getModel().get("room");
        assertEquals(TEST_ROOM_NAME, room.getRoomName());
    }
}