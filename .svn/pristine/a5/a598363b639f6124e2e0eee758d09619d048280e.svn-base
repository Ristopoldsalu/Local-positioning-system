package ee.lps.controller;

import ee.lps.dto.BuildingDto;
import ee.lps.dto.RoomDto;
import ee.lps.service.BuildingService;
import ee.lps.service.RoomService;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

import static java.util.Arrays.asList;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNull;
import static org.mockito.Mockito.when;

public class BeaconControllerTest {
    @InjectMocks
    private BeaconController controller;

    @Mock
    private BuildingService buildingServiceMock;

    @Mock
    private RoomService roomService;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        when(buildingServiceMock.getBuildingByMac("17:17:17:AA:AA:AA")).thenReturn(new BuildingDto(1L, "Big building"));
        List<RoomDto> sampleList = asList(new RoomDto(5L, "1337A", "Secretary room"),
                new RoomDto(4L, "137A", "Boss room"));
        when(roomService.getRoomsByBuildingId(2L)).thenReturn(sampleList);
        when(roomService.checkIfCorrectDestination("17:17:17:17:17:17", (short) -89, 2L)).thenReturn(true);
    }

    @Test
    public void shouldNotPutBuildingToModelIfMacIsNull() {
        ModelAndView response = controller.getBeaconByMac(null);
        assertNull(response.getModelMap().get("building"));
    }

    @Test
    public void shouldPutBuildingToModelIfMacExists() {
        ModelAndView response = controller.getBeaconByMac("17:17:17:AA:AA:AA");
        BuildingDto building = (BuildingDto) response.getModelMap().get("building");
        assertEquals("Big building", building.getBuildingName());
        assertEquals(1L, building.getBuildingId().longValue());
    }

    @Test
    public void shouldNotPutBuildingToModelIfMacNotExists() {
        ModelAndView response = controller.getBeaconByMac("17:17:17:BB:BB:BB");
        assertEquals(null, response.getModelMap().get("building"));

        response = controller.getBeaconByMac("asdf");
        assertEquals(null, response.getModelMap().get("building"));
    }

    @Test
    public void shouldReturnZeroRoomsIfBuildingIdIsNull() {
        List<RoomDto> roomDtos = controller.getRooms(null);
        assertEquals(0, roomDtos.size());
    }

    @Test
    public void shouldReturnZeroRoomsIfBuildingIdNotExists() {
        List<RoomDto> roomDtos = controller.getRooms(4L);
        assertEquals(0, roomDtos.size());
    }

    @Test
    public void shouldReturnListWithRoomsWhenBuildingExists() {
        List<RoomDto> roomDtos = controller.getRooms(2L);
        assertEquals(2, roomDtos.size());
    }
}