package ee.lps.service;

import ee.lps.dto.BeaconMeasurementDTO;
import ee.lps.dto.UserPositionDTO;
import ee.lps.repository.BeaconRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Comparator;

import static java.util.stream.Collectors.*;

@Service
public class NavigationServiceImpl implements NavigationService {
    public static final int MIN_RSSI = -70;

    @Autowired
    private BeaconRepository beaconRepository;

    @Override
    public UserPositionDTO findUserPosition(Collection<BeaconMeasurementDTO> measurements) {
        BeaconMeasurementDTO bestMeasurement = chooseBestMeasurement(removeNonExistingBeacons(measurements));
        if (bestMeasurement == null) return null;
        return new UserPositionDTO(beaconRepository.findByMac(bestMeasurement.getMac()));
    }

    private Collection<BeaconMeasurementDTO> removeNonExistingBeacons(Collection<BeaconMeasurementDTO> measurements) {
        return measurements.stream().filter(this::isValidMac).collect(toList());
    }

    private boolean isValidMac(BeaconMeasurementDTO measurement) {
        return beaconRepository.findByMac(measurement.getMac()) != null;
    }

    private BeaconMeasurementDTO chooseBestMeasurement(Collection<BeaconMeasurementDTO> measurements) {
        if (measurements.size() == 0) return null;
        BeaconMeasurementDTO bestMeasurement = getBestRssiMeasurement(measurements);
        return bestMeasurement.getRssi() >= MIN_RSSI ? bestMeasurement : null;
    }

    private BeaconMeasurementDTO getBestRssiMeasurement(Collection<BeaconMeasurementDTO> measurements) {
        return measurements.stream().max(Comparator.comparingInt(BeaconMeasurementDTO::getRssi)).get();
    }
}